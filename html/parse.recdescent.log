Default global: directed => digraph
Default global: driver => /usr/local/bin/dot
Default global: format => svg
Default global: label => ->
Default global: name => Perl
Default global: record_orientation => vertical
Default global: record_shape => Mrecord
Default global: strict => 0
Default global: timeout => 10
Default graph: rankdir => TB
Default node: color => darkblue, shape => oval
Default edge: color => grey
Added node: "Grammar"
Added node: "typename" [ label="'int'  " ]
Added edge: "Grammar" -> "typename" [ label="" ]
Added node: "the" [ label="'the'  " ]
Added edge: "Grammar" -> "the" [ label="" ]
Added node: "a" [ label="'a'  " ]
Added edge: "Grammar" -> "a" [ label="" ]
Added node: "test1" [ label="'(' 'the' '$::first' /te+st/ is _alternation_1_of_production_1_of_rule_test1(s?)  " ]
Added node: "is"
Added edge: "test1" -> "is" [ label="" ]
Added node: "_alternation_1_of_production_1_of_rule_test1"
Added edge: "test1" -> "_alternation_1_of_production_1_of_rule_test1" [ label="" ]
Added edge: "Grammar" -> "test1" [ label="" ]
Added node: "is" [ label="'is'  'are'  " ]
Added edge: "Grammar" -> "is" [ label="" ]
Added node: "test2" [ label="$arg\{article\} $arg\[3\]\[$arg\{sound\}\]  " ]
Added edge: "Grammar" -> "test2" [ label="" ]
Added node: "test5" [ label="name notname  name  " ]
Added node: "name"
Added edge: "test5" -> "name" [ label="" ]
Added node: "notname"
Added edge: "test5" -> "notname" [ label="" ]
Added edge: "Grammar" -> "test5" [ label="" ]
Added node: "cat" [ label="<reject: $arg\[0\] ne 'meows'> 'cat'   " ]
Added edge: "Grammar" -> "cat" [ label="" ]
Added node: "typedef" [ label="'type' id 'is' typename ';'  " ]
Added node: "id"
Added edge: "typedef" -> "id" [ label="" ]
Added edge: "typedef" -> "typename" [ label="" ]
Added edge: "Grammar" -> "typedef" [ label="" ]
Added node: "id" [ label="/\[a-z\]		# LEADING ALPHABETIC\\n		  \\w*		# FOLLOWED BY ALPHAS, DIGITS, OR UNDERSCORES\\n		 /ix  " ]
Added edge: "Grammar" -> "id" [ label="" ]
Added node: "_alternation_1_of_production_1_of_rule_test1" [ label="'easy'  " ]
Added edge: "Grammar" -> "_alternation_1_of_production_1_of_rule_test1" [ label="" ]
Added node: "test7" [ label="'x' <resync> /y+/  " ]
Added edge: "Grammar" -> "test7" [ label="" ]
Added node: "fail" [ label=" " ]
Added edge: "Grammar" -> "fail" [ label="" ]
Added node: "name" [ label="'fred'  " ]
Added edge: "Grammar" -> "name" [ label="" ]
Added node: "notname" [ label="/\[a-z\]\\w*/i  " ]
Added edge: "Grammar" -> "notname" [ label="" ]
Added node: "_alternation_1_of_production_1_of_rule_test3" [ label="defn  typedef  fail  " ]
Added node: "defn"
Added edge: "_alternation_1_of_production_1_of_rule_test3" -> "defn" [ label="" ]
Added edge: "_alternation_1_of_production_1_of_rule_test3" -> "typedef" [ label="" ]
Added edge: "_alternation_1_of_production_1_of_rule_test3" -> "fail" [ label="" ]
Added edge: "Grammar" -> "_alternation_1_of_production_1_of_rule_test3" [ label="" ]
Added node: "test6" [ label="<rulevar: $test6 = 1>  'a' <commit> 'b' <uncommit> 'c' <reject: $test6 && $text>  'a'  <uncommit>  " ]
Added edge: "Grammar" -> "test6" [ label="" ]
Added node: "defn" [ label="'var' id 'holds' typename ';'  " ]
Added edge: "defn" -> "id" [ label="" ]
Added edge: "defn" -> "typename" [ label="" ]
Added edge: "Grammar" -> "defn" [ label="" ]
Added node: "b" [ label="'b'  " ]
Added edge: "Grammar" -> "b" [ label="" ]
Added node: "dog" [ label="'dog'  " ]
Added edge: "Grammar" -> "dog" [ label="" ]
Added node: "test4" [ label="'a' b /c/  " ]
Added edge: "test4" -> "b" [ label="" ]
Added edge: "Grammar" -> "test4" [ label="" ]
Added node: "test3" [ label="_alternation_1_of_production_1_of_rule_test3(5..10)  " ]
Added edge: "test3" -> "_alternation_1_of_production_1_of_rule_test3" [ label="" ]
Added edge: "Grammar" -> "test3" [ label="" ]
Driver: /usr/local/bin/dot. Output file: html/parse.recdescent.svg. Format: svg. Timeout: 10 second(s)

digraph Perl
{
graph [ rankdir="TB" ]
node [ color="darkblue" shape="oval" ]
edge [ color="grey" ]
"Grammar"
"typename" [ label="'int'  " ]
"Grammar" -> "typename" [ label="" ]
"the" [ label="'the'  " ]
"Grammar" -> "the" [ label="" ]
"a" [ label="'a'  " ]
"Grammar" -> "a" [ label="" ]
"test1" [ label="'(' 'the' '$::first' /te+st/ is _alternation_1_of_production_1_of_rule_test1(s?)  " ]
"is"
"test1" -> "is" [ label="" ]
"_alternation_1_of_production_1_of_rule_test1"
"test1" -> "_alternation_1_of_production_1_of_rule_test1" [ label="" ]
"Grammar" -> "test1" [ label="" ]
"is" [ label="'is'  'are'  " ]
"Grammar" -> "is" [ label="" ]
"test2" [ label="$arg\{article\} $arg\[3\]\[$arg\{sound\}\]  " ]
"Grammar" -> "test2" [ label="" ]
"test5" [ label="name notname  name  " ]
"name"
"test5" -> "name" [ label="" ]
"notname"
"test5" -> "notname" [ label="" ]
"Grammar" -> "test5" [ label="" ]
"cat" [ label="<reject: $arg\[0\] ne 'meows'> 'cat'   " ]
"Grammar" -> "cat" [ label="" ]
"typedef" [ label="'type' id 'is' typename ';'  " ]
"id"
"typedef" -> "id" [ label="" ]
"typedef" -> "typename" [ label="" ]
"Grammar" -> "typedef" [ label="" ]
"id" [ label="/\[a-z\]		# LEADING ALPHABETIC\\n		  \\w*		# FOLLOWED BY ALPHAS, DIGITS, OR UNDERSCORES\\n		 /ix  " ]
"Grammar" -> "id" [ label="" ]
"_alternation_1_of_production_1_of_rule_test1" [ label="'easy'  " ]
"Grammar" -> "_alternation_1_of_production_1_of_rule_test1" [ label="" ]
"test7" [ label="'x' <resync> /y+/  " ]
"Grammar" -> "test7" [ label="" ]
"fail" [ label=" " ]
"Grammar" -> "fail" [ label="" ]
"name" [ label="'fred'  " ]
"Grammar" -> "name" [ label="" ]
"notname" [ label="/\[a-z\]\\w*/i  " ]
"Grammar" -> "notname" [ label="" ]
"_alternation_1_of_production_1_of_rule_test3" [ label="defn  typedef  fail  " ]
"defn"
"_alternation_1_of_production_1_of_rule_test3" -> "defn" [ label="" ]
"_alternation_1_of_production_1_of_rule_test3" -> "typedef" [ label="" ]
"_alternation_1_of_production_1_of_rule_test3" -> "fail" [ label="" ]
"Grammar" -> "_alternation_1_of_production_1_of_rule_test3" [ label="" ]
"test6" [ label="<rulevar: $test6 = 1>  'a' <commit> 'b' <uncommit> 'c' <reject: $test6 && $text>  'a'  <uncommit>  " ]
"Grammar" -> "test6" [ label="" ]
"defn" [ label="'var' id 'holds' typename ';'  " ]
"defn" -> "id" [ label="" ]
"defn" -> "typename" [ label="" ]
"Grammar" -> "defn" [ label="" ]
"b" [ label="'b'  " ]
"Grammar" -> "b" [ label="" ]
"dog" [ label="'dog'  " ]
"Grammar" -> "dog" [ label="" ]
"test4" [ label="'a' b /c/  " ]
"test4" -> "b" [ label="" ]
"Grammar" -> "test4" [ label="" ]
"test3" [ label="_alternation_1_of_production_1_of_rule_test3(5..10)  " ]
"test3" -> "_alternation_1_of_production_1_of_rule_test3" [ label="" ]
"Grammar" -> "test3" [ label="" ]
}
Wrote html/parse.recdescent.svg. Size: 20478 bytes
